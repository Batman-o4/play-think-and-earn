name: SkillStreak CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  backend-test:
    name: Backend Tests
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [18.x, 20.x]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        cache-dependency-path: backend/package-lock.json
    
    - name: Install backend dependencies
      run: |
        cd backend
        npm ci
    
    - name: Run backend linting
      run: |
        cd backend
        npm run lint || echo "Linting not configured"
    
    - name: Run backend tests
      run: |
        cd backend
        npm test
    
    - name: Run backend test coverage
      run: |
        cd backend
        npm run test:coverage
    
    - name: Upload backend coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./backend/coverage/lcov.info
        flags: backend
        name: backend-coverage
        fail_ci_if_error: false

  flutter-test:
    name: Flutter Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Java
      uses: actions/setup-java@v3
      with:
        distribution: 'zulu'
        java-version: '11'
    
    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: '3.16.0'
        channel: 'stable'
    
    - name: Flutter version
      run: flutter --version
    
    - name: Install Flutter dependencies
      run: |
        cd mobile
        flutter pub get
    
    - name: Analyze Flutter code
      run: |
        cd mobile
        flutter analyze
    
    - name: Run Flutter tests
      run: |
        cd mobile
        flutter test --coverage
    
    - name: Upload Flutter coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./mobile/coverage/lcov.info
        flags: flutter
        name: flutter-coverage
        fail_ci_if_error: false

  integration-test:
    name: Integration Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Java
      uses: actions/setup-java@v3
      with:
        distribution: 'zulu'
        java-version: '11'
    
    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: '3.16.0'
        channel: 'stable'
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18.x'
        cache: 'npm'
        cache-dependency-path: backend/package-lock.json
    
    - name: Install backend dependencies
      run: |
        cd backend
        npm ci
    
    - name: Start backend server
      run: |
        cd backend
        npm start &
        sleep 10
    
    - name: Install Flutter dependencies
      run: |
        cd mobile
        flutter pub get
    
    - name: Run integration tests
      run: |
        cd mobile
        flutter test integration_test/

  build-backend:
    name: Build Backend Docker Image
    runs-on: ubuntu-latest
    needs: [backend-test]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Login to Docker Hub
      if: github.event_name == 'push' && github.ref == 'refs/heads/main'
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
    
    - name: Build and test Docker image
      run: |
        cd backend
        docker build -t skillstreak-backend:test .
        docker run --rm -d -p 3000:3000 --name test-backend skillstreak-backend:test
        sleep 10
        curl -f http://localhost:3000/health || exit 1
        docker stop test-backend
    
    - name: Build and push Docker image
      if: github.event_name == 'push' && github.ref == 'refs/heads/main'
      uses: docker/build-push-action@v5
      with:
        context: ./backend
        push: true
        tags: |
          skillstreak/backend:latest
          skillstreak/backend:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  build-flutter:
    name: Build Flutter APK
    runs-on: ubuntu-latest
    needs: [flutter-test]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Java
      uses: actions/setup-java@v3
      with:
        distribution: 'zulu'
        java-version: '11'
    
    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: '3.16.0'
        channel: 'stable'
    
    - name: Install Flutter dependencies
      run: |
        cd mobile
        flutter pub get
    
    - name: Build APK
      run: |
        cd mobile
        flutter build apk --release
    
    - name: Upload APK artifact
      uses: actions/upload-artifact@v3
      with:
        name: skillstreak-apk
        path: mobile/build/app/outputs/flutter-apk/app-release.apk
        retention-days: 30
    
    - name: Build App Bundle
      run: |
        cd mobile
        flutter build appbundle --release
    
    - name: Upload App Bundle artifact
      uses: actions/upload-artifact@v3
      with:
        name: skillstreak-aab
        path: mobile/build/app/outputs/bundle/release/app-release.aab
        retention-days: 30

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [backend-test, flutter-test, build-backend]
    if: github.ref == 'refs/heads/develop'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Deploy to staging
      run: |
        echo "Deploying to staging environment..."
        # Add your staging deployment commands here
        # For example, deploy to a staging server or cloud service
    
    - name: Run smoke tests
      run: |
        echo "Running smoke tests on staging..."
        # Add smoke test commands here

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [backend-test, flutter-test, build-backend, build-flutter, security-scan]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Deploy backend to production
      run: |
        echo "Deploying backend to production..."
        # Add your production deployment commands here
        # For example:
        # - Deploy Docker image to production
        # - Update Kubernetes deployment
        # - Deploy to cloud service
    
    - name: Deploy mobile app
      run: |
        echo "Mobile app artifacts are ready for distribution"
        # The APK and AAB files are available as artifacts
        # You can download and distribute them through your preferred channels
    
    - name: Run production smoke tests
      run: |
        echo "Running production smoke tests..."
        # Add production smoke test commands here
    
    - name: Notify deployment
      run: |
        echo "âœ… SkillStreak deployed successfully to production!"
        # Add notification logic (Slack, email, etc.)

  cleanup:
    name: Cleanup
    runs-on: ubuntu-latest
    needs: [deploy-production, deploy-staging]
    if: always()
    
    steps:
    - name: Cleanup old artifacts
      run: |
        echo "Cleaning up old build artifacts..."
        # Add cleanup commands if needed