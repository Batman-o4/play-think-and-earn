name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  backend-tests:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: backend/package-lock.json
    
    - name: Install backend dependencies
      run: |
        cd backend
        npm ci
    
    - name: Run backend tests
      run: |
        cd backend
        npm test
    
    - name: Run backend linting
      run: |
        cd backend
        npm run lint || echo "Linting not configured yet"

  flutter-tests:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: '3.16.0'
        channel: 'stable'
    
    - name: Install Flutter dependencies
      run: |
        cd mobile
        flutter pub get
    
    - name: Run Flutter tests
      run: |
        cd mobile
        flutter test
    
    - name: Run Flutter analyze
      run: |
        cd mobile
        flutter analyze
    
    - name: Check Flutter formatting
      run: |
        cd mobile
        flutter format --dry-run --set-exit-if-changed .

  build-backend:
    runs-on: ubuntu-latest
    needs: [backend-tests]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
    
    - name: Build and push backend Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        push: true
        tags: |
          skillstreak/backend:latest
          skillstreak/backend:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  build-flutter:
    runs-on: ubuntu-latest
    needs: [flutter-tests]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: '3.16.0'
        channel: 'stable'
    
    - name: Setup Java
      uses: actions/setup-java@v4
      with:
        distribution: 'zulu'
        java-version: '17'
    
    - name: Setup Android SDK
      uses: android-actions/setup-android@v3
    
    - name: Install Flutter dependencies
      run: |
        cd mobile
        flutter pub get
    
    - name: Build Android APK
      run: |
        cd mobile
        flutter build apk --release
    
    - name: Upload APK artifact
      uses: actions/upload-artifact@v4
      with:
        name: skillstreak-apk
        path: mobile/build/app/outputs/flutter-apk/app-release.apk
        retention-days: 30

  integration-tests:
    runs-on: ubuntu-latest
    needs: [build-backend, build-flutter]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: backend/package-lock.json
    
    - name: Install backend dependencies
      run: |
        cd backend
        npm ci
    
    - name: Start backend server
      run: |
        cd backend
        npm start &
        sleep 10
    
    - name: Test backend health
      run: |
        curl -f http://localhost:3000/health || exit 1
    
    - name: Test API endpoints
      run: |
        # Test courses endpoint
        curl -f http://localhost:3000/api/courses || exit 1
        
        # Test leaderboard endpoint
        curl -f http://localhost:3000/api/leaderboard || exit 1
        
        # Test validateRun endpoint with sample data
        curl -X POST http://localhost:3000/api/validateRun \
          -H "Content-Type: application/json" \
          -d '{"exerciseType":"trace","exerciseId":"test","runData":{"points":[{"x":100,"y":100}],"letter":"A","width":300,"height":300},"score":0,"xpEarned":10,"timestamp":"2023-01-01T00:00:00.000Z","validated":false}' || exit 1

  security-scan:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: 'trivy-results.sarif'

  deploy-staging:
    runs-on: ubuntu-latest
    needs: [integration-tests, security-scan]
    if: github.ref == 'refs/heads/develop'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Deploy to staging
      run: |
        echo "Deploying to staging environment..."
        # Add your staging deployment commands here
        # For example: kubectl apply -f k8s/staging/

  deploy-production:
    runs-on: ubuntu-latest
    needs: [integration-tests, security-scan]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Deploy to production
      run: |
        echo "Deploying to production environment..."
        # Add your production deployment commands here
        # For example: kubectl apply -f k8s/production/